// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: proto/grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortURLsServer_AddShortURL_FullMethodName      = "/grpc.ShortURLsServer/AddShortURL"
	ShortURLsServer_AddJSONShortURL_FullMethodName  = "/grpc.ShortURLsServer/AddJSONShortURL"
	ShortURLsServer_AddBatchShortURL_FullMethodName = "/grpc.ShortURLsServer/AddBatchShortURL"
	ShortURLsServer_ReturnURL_FullMethodName        = "/grpc.ShortURLsServer/ReturnURL"
	ShortURLsServer_ReturnUserURLs_FullMethodName   = "/grpc.ShortURLsServer/ReturnUserURLs"
	ShortURLsServer_ReturnStats_FullMethodName      = "/grpc.ShortURLsServer/ReturnStats"
	ShortURLsServer_PingDB_FullMethodName           = "/grpc.ShortURLsServer/PingDB"
	ShortURLsServer_MarkToDelete_FullMethodName     = "/grpc.ShortURLsServer/MarkToDelete"
)

// ShortURLsServerClient is the client API for ShortURLsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortURLsServerClient interface {
	AddShortURL(ctx context.Context, in *NewURLEntry, opts ...grpc.CallOption) (*NewURLResponce, error)
	AddJSONShortURL(ctx context.Context, in *NewJSONEntry, opts ...grpc.CallOption) (*NewJSONResponce, error)
	AddBatchShortURL(ctx context.Context, in *NewJSONEntry, opts ...grpc.CallOption) (*NewJSONResponce, error)
	ReturnURL(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*FullURL, error)
	ReturnUserURLs(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*AllUserURLs, error)
	ReturnStats(ctx context.Context, in *Statsrequest, opts ...grpc.CallOption) (*StatsResponce, error)
	PingDB(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Status, error)
	MarkToDelete(ctx context.Context, in *DeleteURLs, opts ...grpc.CallOption) (*Status, error)
}

type shortURLsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortURLsServerClient(cc grpc.ClientConnInterface) ShortURLsServerClient {
	return &shortURLsServerClient{cc}
}

func (c *shortURLsServerClient) AddShortURL(ctx context.Context, in *NewURLEntry, opts ...grpc.CallOption) (*NewURLResponce, error) {
	out := new(NewURLResponce)
	err := c.cc.Invoke(ctx, ShortURLsServer_AddShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLsServerClient) AddJSONShortURL(ctx context.Context, in *NewJSONEntry, opts ...grpc.CallOption) (*NewJSONResponce, error) {
	out := new(NewJSONResponce)
	err := c.cc.Invoke(ctx, ShortURLsServer_AddJSONShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLsServerClient) AddBatchShortURL(ctx context.Context, in *NewJSONEntry, opts ...grpc.CallOption) (*NewJSONResponce, error) {
	out := new(NewJSONResponce)
	err := c.cc.Invoke(ctx, ShortURLsServer_AddBatchShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLsServerClient) ReturnURL(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*FullURL, error) {
	out := new(FullURL)
	err := c.cc.Invoke(ctx, ShortURLsServer_ReturnURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLsServerClient) ReturnUserURLs(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*AllUserURLs, error) {
	out := new(AllUserURLs)
	err := c.cc.Invoke(ctx, ShortURLsServer_ReturnUserURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLsServerClient) ReturnStats(ctx context.Context, in *Statsrequest, opts ...grpc.CallOption) (*StatsResponce, error) {
	out := new(StatsResponce)
	err := c.cc.Invoke(ctx, ShortURLsServer_ReturnStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLsServerClient) PingDB(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, ShortURLsServer_PingDB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortURLsServerClient) MarkToDelete(ctx context.Context, in *DeleteURLs, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, ShortURLsServer_MarkToDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortURLsServerServer is the server API for ShortURLsServer service.
// All implementations must embed UnimplementedShortURLsServerServer
// for forward compatibility
type ShortURLsServerServer interface {
	AddShortURL(context.Context, *NewURLEntry) (*NewURLResponce, error)
	AddJSONShortURL(context.Context, *NewJSONEntry) (*NewJSONResponce, error)
	AddBatchShortURL(context.Context, *NewJSONEntry) (*NewJSONResponce, error)
	ReturnURL(context.Context, *ShortURL) (*FullURL, error)
	ReturnUserURLs(context.Context, *UserID) (*AllUserURLs, error)
	ReturnStats(context.Context, *Statsrequest) (*StatsResponce, error)
	PingDB(context.Context, *Ping) (*Status, error)
	MarkToDelete(context.Context, *DeleteURLs) (*Status, error)
	mustEmbedUnimplementedShortURLsServerServer()
}

// UnimplementedShortURLsServerServer must be embedded to have forward compatible implementations.
type UnimplementedShortURLsServerServer struct {
}

func (UnimplementedShortURLsServerServer) AddShortURL(context.Context, *NewURLEntry) (*NewURLResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShortURL not implemented")
}
func (UnimplementedShortURLsServerServer) AddJSONShortURL(context.Context, *NewJSONEntry) (*NewJSONResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJSONShortURL not implemented")
}
func (UnimplementedShortURLsServerServer) AddBatchShortURL(context.Context, *NewJSONEntry) (*NewJSONResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBatchShortURL not implemented")
}
func (UnimplementedShortURLsServerServer) ReturnURL(context.Context, *ShortURL) (*FullURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnURL not implemented")
}
func (UnimplementedShortURLsServerServer) ReturnUserURLs(context.Context, *UserID) (*AllUserURLs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnUserURLs not implemented")
}
func (UnimplementedShortURLsServerServer) ReturnStats(context.Context, *Statsrequest) (*StatsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnStats not implemented")
}
func (UnimplementedShortURLsServerServer) PingDB(context.Context, *Ping) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDB not implemented")
}
func (UnimplementedShortURLsServerServer) MarkToDelete(context.Context, *DeleteURLs) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkToDelete not implemented")
}
func (UnimplementedShortURLsServerServer) mustEmbedUnimplementedShortURLsServerServer() {}

// UnsafeShortURLsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortURLsServerServer will
// result in compilation errors.
type UnsafeShortURLsServerServer interface {
	mustEmbedUnimplementedShortURLsServerServer()
}

func RegisterShortURLsServerServer(s grpc.ServiceRegistrar, srv ShortURLsServerServer) {
	s.RegisterService(&ShortURLsServer_ServiceDesc, srv)
}

func _ShortURLsServer_AddShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewURLEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLsServerServer).AddShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLsServer_AddShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLsServerServer).AddShortURL(ctx, req.(*NewURLEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLsServer_AddJSONShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewJSONEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLsServerServer).AddJSONShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLsServer_AddJSONShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLsServerServer).AddJSONShortURL(ctx, req.(*NewJSONEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLsServer_AddBatchShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewJSONEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLsServerServer).AddBatchShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLsServer_AddBatchShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLsServerServer).AddBatchShortURL(ctx, req.(*NewJSONEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLsServer_ReturnURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLsServerServer).ReturnURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLsServer_ReturnURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLsServerServer).ReturnURL(ctx, req.(*ShortURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLsServer_ReturnUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLsServerServer).ReturnUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLsServer_ReturnUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLsServerServer).ReturnUserURLs(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLsServer_ReturnStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Statsrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLsServerServer).ReturnStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLsServer_ReturnStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLsServerServer).ReturnStats(ctx, req.(*Statsrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLsServer_PingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLsServerServer).PingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLsServer_PingDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLsServerServer).PingDB(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortURLsServer_MarkToDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortURLsServerServer).MarkToDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortURLsServer_MarkToDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortURLsServerServer).MarkToDelete(ctx, req.(*DeleteURLs))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortURLsServer_ServiceDesc is the grpc.ServiceDesc for ShortURLsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortURLsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ShortURLsServer",
	HandlerType: (*ShortURLsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShortURL",
			Handler:    _ShortURLsServer_AddShortURL_Handler,
		},
		{
			MethodName: "AddJSONShortURL",
			Handler:    _ShortURLsServer_AddJSONShortURL_Handler,
		},
		{
			MethodName: "AddBatchShortURL",
			Handler:    _ShortURLsServer_AddBatchShortURL_Handler,
		},
		{
			MethodName: "ReturnURL",
			Handler:    _ShortURLsServer_ReturnURL_Handler,
		},
		{
			MethodName: "ReturnUserURLs",
			Handler:    _ShortURLsServer_ReturnUserURLs_Handler,
		},
		{
			MethodName: "ReturnStats",
			Handler:    _ShortURLsServer_ReturnStats_Handler,
		},
		{
			MethodName: "PingDB",
			Handler:    _ShortURLsServer_PingDB_Handler,
		},
		{
			MethodName: "MarkToDelete",
			Handler:    _ShortURLsServer_MarkToDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc.proto",
}
